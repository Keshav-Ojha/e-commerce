services:
  api-gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - "8222:8222"
    networks:
      - microservices-net
    depends_on:
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_started
      customer-service:
        condition: service_healthy
      product-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8222/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  discovery-server:
    build:
      context: ./services/discovery-server
      dockerfile: Dockerfile
    networks:
      - microservices-net
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

#  config-server:
#    build:
#      context: ./services/config-server
#      dockerfile: Dockerfile
#    networks:
#      - microservices-net
#    environment:
#      - SPRING_PROFILES_ACTIVE=native
#    healthcheck:
#      test: [ "CMD", "curl", "-f", "http://localhost:8888/actuator/health" ]
#      interval: 30s
#      retries: 3
#      start_period: 10s
#      timeout: 5s

  customer-service:
    build:
      context: ./services/customer # Path to the service directory
      dockerfile: Dockerfile
    networks:
      - microservices-net
    depends_on:
      mongo:
        condition: service_started
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8090/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  product-service:
    build:
      context: ./services/product # Path to the service directory
      dockerfile: Dockerfile
    networks:
      - microservices-net
    depends_on:
      postgres:
        condition: service_started
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8050/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  order-service:
    build:
      context: ./services/order # Path to the service directory
      dockerfile: Dockerfile
    networks:
      - microservices-net
    depends_on:
      postgres:
        condition: service_started
      discovery-server:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
      customer-service:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8070/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  payment-service:
    build:
      context: ./services/payment # Path to the service directory
      dockerfile: Dockerfile
    networks:
      - microservices-net
    depends_on:
      postgres:
        condition: service_started
      discovery-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8060/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  notification-service:
    build:
      context: ./services/notification # Path to the service directory
      dockerfile: Dockerfile
    networks:
      - microservices-net
    depends_on:
      mongo:
        condition: service_started
      discovery-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
      mail-dev:
        condition: service_started
      zipkin:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8100/actuator/health" ]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  postgres:
    container_name: ms_pg_sql
    image: postgres
    environment:
      POSTGRES_USER: keshav
      POSTGRES_PASSWORD: keshav
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pg_admin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - microservices-net
    restart: unless-stopped

  mongo:
    container_name: ms_mongo_db
    image: mongo:7.0
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - microservices-net

  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express:1.0.0-alpha.4
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ADMINUSERNAME: ""
      ME_CONFIG_MONGODB_ADMINPASSWORD: ""
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    networks:
      - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "2181" ]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 5s


  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: ms_kafka
    ports:
      - "9090:9090"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9090
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9090
    networks:
      - microservices-net
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
      interval: 30s
      retries: 5
      start_period: 10s
      timeout: 5s



  mail-dev:
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - "1080:1080"
      - "1025:1025"
    networks:
      - microservices-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net

  keycloak:
    container_name: keycloak-ms
    image: quay.io/keycloak/keycloak:24.0.2
    ports:
      - "8080:8080"
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    networks:
      - microservices-net
    command:
      - "start-dev"


networks:
  microservices-net:
    driver: bridge


volumes:
  postgres:
  pgadmin:
  mongo_data:

